/**
  You need to create an express HTTP server in Node.js which will handle the logic of a todo list app.
  - Don't use any database, just store all the data in an array to store the todo list data (in-memory)
  - Hard todo: Try to save responses in files, so that even if u exit the app and run it again, the data remains (similar to databases)

  Each todo has a title and a description. The title is a string and the description is a string.
  Each todo should also get an unique autogenerated id every time it is created
  The expected API endpoints are defined below,
  1.GET /todos - Retrieve all todo items
    Description: Returns a list of all todo items.
    Response: 200 OK with an array of todo items in JSON format.
    Example: GET http://localhost:3000/todos
    
  2.GET /todos/:id - Retrieve a specific todo item by ID
    Description: Returns a specific todo item identified by its ID.
    Response: 200 OK with the todo item in JSON format if found, or 404 Not Found if not found.
    Example: GET http://localhost:3000/todos/123
    
  3. POST /todos - Create a new todo item
    Description: Creates a new todo item.
    Request Body: JSON object representing the todo item.
    Response: 201 Created with the ID of the created todo item in JSON format. eg: {id: 1}
    Example: POST http://localhost:3000/todos
    Request Body: { "title": "Buy groceries", "completed": false, description: "I should buy groceries" }
    
  4. PUT /todos/:id - Update an existing todo item by ID
    Description: Updates an existing todo item identified by its ID.
    Request Body: JSON object representing the updated todo item.
    Response: 200 OK if the todo item was found and updated, or 404 Not Found if not found.
    Example: PUT http://localhost:3000/todos/123
    Request Body: { "title": "Buy groceries", "completed": true }
    
  5. DELETE /todos/:id - Delete a todo item by ID
    Description: Deletes a todo item identified by its ID.
    Response: 200 OK if the todo item was found and deleted, or 404 Not Found if not found.
    Example: DELETE http://localhost:3000/todos/123

    - For any other route not defined in the server return 404

  Testing the server - run `npm run test-todoServer` command in terminal
 */
const express = require("express");
const bodyParser = require("body-parser");

const app = express();
const port = 3000;
var ToDosList = [

];
// console.log(ToDos[1])
app.use(bodyParser.json());

function todos(req, res) {
  res.send(ToDosList);
}
app.get("/todos", todos); //returns all todos

function TrueID(ToDosList, id) {
  for (let i = 0; i < ToDosList.length; i++) {
    if (ToDosList[i]["id"] == id) return i;
  }
  return -1;
}

function todosID(req, res) {
  // console.log(req.params)
  let id = req.params[0];
  tid = TrueID(ToDosList, id);
  if (tid == -1) res.status(404).send("ToDo with given ID does not exist");
  res.send(ToDosList[tid]);
}
app.get("/todos/*", todosID); //returns a todo with specified ID

function Add(req, res) {
  // console.log(Object.keys(req.body));
  let userKeys = Object.keys(req.body); //to check if frontend has sent the appropriate object in the body
  if (!userKeys.includes("title", "description")) {
    res.send("invalid ToDo format");
  }
  let nid = ToDosList.length + 1;
  let newToDo = {
    id: nid,
    title: req.body["title"],
    // completed: req.body["completed"],
    description: req.body["description"],
  };
  ToDosList.push(newToDo);
  res.status(201).send({ id: nid });
}
app.post("/todos", Add); //adds the todo and returns it's ID

function ModifyID(req, res) {
  let id = req.params[0];
  tid = TrueID(ToDosList, id); //Position of todo in list
  if (tid == -1) {
    res.status(404).send("ToDo not found");
  }
  ToDosList[tid]["title"] = req.body["title"];
  // ToDosList[tid]["completed"] = req.body["completed"];
  ToDosList[tid]["description"] = req.body["description"];

  res.send("ToDo found and updated");
}
app.put("/todos/*", ModifyID);

function DeleteID(req, res) {
  let id = req.params[0];
  tid = TrueID(ToDosList, id); //Position of todo in list
  if (tid == -1) {
    res.status(404).send("ToDo not found");
  }
  ToDosList.splice(tid, 1);
  res.send("ToDo found and deleted");
}
app.delete("/todos/*", DeleteID);

module.exports = app;

// app.listen(port);
// console.log(`Server started on http://localhost:${port}/todos/1`);
